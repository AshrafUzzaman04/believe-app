name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, sqlite
          coverage: none
          tools: composer:v2
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
          
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
          
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
          
      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
          
      - name: Install Node dependencies
        run: npm ci
          
      - name: Build assets
        run: npm run build
          
      - name: Copy environment file
        run: cp .env.example .env
          
      - name: Generate app key
        run: php artisan key:generate
          
      - name: Run tests
        run: |
          php artisan config:clear
          ./vendor/bin/pest
          
  deploy:
    name: Deploy to Production
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only deploy on main branch
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync
        
      - name: Sync files to server
        run: |
          rsync -avz --delete \
            --exclude='.env' \
            --exclude='.git*' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='storage' \
            --exclude='tests' \
            --exclude='vendor' \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_DEPLOY_PATH }}
            
      - name: Run deployment commands
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ${{ secrets.SSH_DEPLOY_PATH }}
            composer install --no-dev --optimize-autoloader
            php artisan storage:link
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            npm install --production
            npm run production
            sudo chown -R www-data:www-data storage bootstrap/cache
            sudo chmod -R 775 storage bootstrap/cache
          EOF